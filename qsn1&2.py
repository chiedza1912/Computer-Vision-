# -*- coding: utf-8 -*-
"""Qsn1&2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18SDbQ0JQAOaWb_LESjk4H5WE7H6feJpJ

question 1
"""





#using pretrained models 
#adding a pretrained model in sequential model
from keras.applications.inception_v3 import InceptionV3

import keras 
model = keras.models.Sequential()
model.add(InceptionV3(weights='imagenet'))
model.summary()

#importing pretrained models 
# example of loading the inception v3 model
from keras.applications.inception_v3 import InceptionV3

#using pretrained models 
#adding a pretrained model using functional model
inp = keras.Input(shape =(299,299,3))
out = InceptionV3(weights='imagenet')(inp)
model = keras.Model(inputs=inp, outputs=out)
model.summary()

#picking the weights of a pretrained model and train it again

inp = keras.Input(shape =(299,299,3))
out = InceptionV3(weights=None)(inp)
model = keras.Model(inputs=inp, outputs=out)
model.summary()

#using the pretrained model to add our own classifier 
import keras

from keras.models import Sequential,Input,Model

from keras.layers import Dense, Dropout, Flatten

from keras.layers import Conv2D, MaxPooling2D

model = keras.models.Sequential()
model.add(InceptionV3(include_top=False, input_shape=(299,299,3)))
model.add(Flatten())
model.add(Dense(10))
model.summary()

#using the pretrained model to resize the input siz e
model = keras.models.Sequential()
model.add(InceptionV3(include_top=False, input_shape=(75,5625,3)))
model.add(Flatten())
model.add(Dense(10))
model.summary()

#defining the input shape by providing input sensor 
model = keras.models.Sequential()
inp = keras.Input(shape =(75,5625,3))

model.add(InceptionV3(include_top=False, input_tensor=inp))

model.summary()

#using global average pooling 
model = keras.models.Sequential()

model.add(InceptionV3(include_top=False, input_shape=(299,299,3), pooling='avg'))

model.summary()

#Before training the network freeze some of its layers. 
# freezing the top 10 layers of the network. 
Inception = InceptionV3(include_top=False, input_shape=(299,299,3))
for layer in Inception.layers[:10]:
  layer.trainable = False

for layer in Inception.layers:
  sp = '   '[len(layer.name)-9:]
  print(layer.name, sp, layer.trainable)

# Create a new  model
new_model = Sequential()

# Add the vgg convolutional base model
new_model.add(Inception)

# Add new layers
new_model.add(Flatten())
new_model.add(Dense(1024, activation='relu'))
new_model.add(Dropout(0.5))
new_model.add(Dense(3, activation='softmax'))

# Show a summary of the model. Check the number of trainable parameters
new_model.summary()

#training the model
import   tensorflow as tf 
opt = tf.keras.optimizers.Adam(learning_rate=0.01)
new_model.compile(loss='categorical_crossentropy', optimizer=opt)

#training the pretrained model
#new_model.fit(model, epochs = 5)

#new_model.save()

new_model.summary()



pip install streamlit

# pickling the model
import pickle
pickle_out = open("new_model.pkl", "wb")
pickle.dump(new_model, pickle_out)
pickle_out.close()



